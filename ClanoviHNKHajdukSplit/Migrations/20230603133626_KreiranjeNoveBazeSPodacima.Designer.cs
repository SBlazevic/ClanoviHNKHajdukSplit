// <auto-generated />
using System;
using ClanoviHNKHajdukSplit.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClanoviHNKHajdukSplit.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230603133626_KreiranjeNoveBazeSPodacima")]
    partial class KreiranjeNoveBazeSPodacima
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClanoviHNKHajdukSplit.Models.Clan", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ClanarinaId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlikaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClanarinaId");

                    b.HasIndex("UlogaId");

                    b.ToTable("Clanovi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClanarinaId = 2,
                            Ime = "Lukša",
                            Prezime = "Jakobušić",
                            SlikaUrl = "https://hajduk.hr/sadrzaj/organizacija/2021-11-05-luksa-jakobusic.jpg",
                            UlogaId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClanarinaId = 2,
                            Ime = "Marko",
                            Prezime = "Livaja",
                            SlikaUrl = "https://hajduk.hr/sadrzaj/igraci/profil/2022-08-10-15-10-4880-.jpg",
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClanarinaId = 1,
                            Ime = "Stipe",
                            Prezime = "Blažević",
                            SlikaUrl = "https://img.uxwing.com/wp-content/themes/uxwing/download/peoples-avatars-thoughts/male-icon.svg",
                            UlogaId = 3
                        },
                        new
                        {
                            Id = 4,
                            ClanarinaId = 2,
                            Ime = "Filip",
                            Prezime = "Krovinović",
                            SlikaUrl = "https://hajduk.hr/sadrzaj/igraci/profil/2022-08-10-15-12-4030-.jpg",
                            UlogaId = 4
                        },
                        new
                        {
                            Id = 5,
                            ClanarinaId = 2,
                            Ime = "Ivan",
                            Prezime = "Lučić",
                            SlikaUrl = "https://hajduk.hr/sadrzaj/igraci/profil/2022-11-30-12-53-118-.jpg",
                            UlogaId = 6
                        },
                        new
                        {
                            Id = 6,
                            ClanarinaId = 2,
                            Ime = "Emir",
                            Prezime = "Sahiti",
                            SlikaUrl = "https://hajduk.hr/sadrzaj/igraci/profil/2022-08-10-15-13-6106-.jpg",
                            UlogaId = 5
                        },
                        new
                        {
                            Id = 7,
                            ClanarinaId = 2,
                            Ime = "Dario",
                            Prezime = "Melnjak",
                            SlikaUrl = "https://hajduk.hr/sadrzaj/igraci/profil/2022-08-10-15-11-119-.jpg",
                            UlogaId = 7
                        },
                        new
                        {
                            Id = 8,
                            ClanarinaId = 1,
                            Ime = "Luka",
                            Prezime = "Hat",
                            SlikaUrl = "https://img.uxwing.com/wp-content/themes/uxwing/download/peoples-avatars-thoughts/male-icon.svg",
                            UlogaId = 3
                        },
                        new
                        {
                            Id = 9,
                            ClanarinaId = 1,
                            Ime = "Fabijan",
                            Prezime = "Dragojević",
                            SlikaUrl = "https://img.uxwing.com/wp-content/themes/uxwing/download/peoples-avatars-thoughts/male-icon.svg",
                            UlogaId = 3
                        });
                });

            modelBuilder.Entity("ClanoviHNKHajdukSplit.Models.Clanarina", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Cijena")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Vrsta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clanarina");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cijena = 150.00m,
                            Vrsta = "Standardna"
                        },
                        new
                        {
                            Id = 2,
                            Cijena = 100.00m,
                            Vrsta = "Povlaštena"
                        });
                });

            modelBuilder.Entity("ClanoviHNKHajdukSplit.Models.Uloga", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("UlogaNaziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uloga");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UlogaNaziv = "Predsjednik udruge članova"
                        },
                        new
                        {
                            Id = 2,
                            UlogaNaziv = "Kapetan nogometne ekipe"
                        },
                        new
                        {
                            Id = 3,
                            UlogaNaziv = "Navijač"
                        },
                        new
                        {
                            Id = 4,
                            UlogaNaziv = "Vezni igrač nogometne ekipe"
                        },
                        new
                        {
                            Id = 5,
                            UlogaNaziv = "Napadač nogometne ekipe"
                        },
                        new
                        {
                            Id = 6,
                            UlogaNaziv = "Golman nogometne ekipe"
                        },
                        new
                        {
                            Id = 7,
                            UlogaNaziv = "Obrambeni igrač nogometne ekipe"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClanoviHNKHajdukSplit.Models.Clan", b =>
                {
                    b.HasOne("ClanoviHNKHajdukSplit.Models.Clanarina", "Clanarina")
                        .WithMany("Clanovi")
                        .HasForeignKey("ClanarinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClanoviHNKHajdukSplit.Models.Uloga", "Uloga")
                        .WithMany("Clanovi")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clanarina");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClanoviHNKHajdukSplit.Models.Clanarina", b =>
                {
                    b.Navigation("Clanovi");
                });

            modelBuilder.Entity("ClanoviHNKHajdukSplit.Models.Uloga", b =>
                {
                    b.Navigation("Clanovi");
                });
#pragma warning restore 612, 618
        }
    }
}
